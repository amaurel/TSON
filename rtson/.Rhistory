baseline <- 70
writeLines(paste0("world.setBlocks(-80,",baseline-2,",-80,180,",baseline,",180,2)"), conn)
writeLines(paste0("world.setBlocks(-50,",baseline+1,",-50,150,",baseline+50,",150,0)"), conn)
for (i in 1:nrow(iris)) {
addBlock(10*iris[i,"Sepal.Length"],
baseline + 2 + 10*(iris[i,"Sepal.Width"] - min(iris[,"Sepal.Width"])),
10*iris[i,"Petal.Length"],
c(41,42,45)[as.numeric(iris[i,"Species"])],
conn)
}
addBlock <- function(x, y, z, b, conn) {
writeLines(paste0("world.setBlock(",round(x),",",round(y),",",round(z),",",round(b),")"), conn)
}
for (i in 1:nrow(iris)) {
addBlock(10*iris[i,"Sepal.Length"],
baseline + 2 + 10*(iris[i,"Sepal.Width"] - min(iris[,"Sepal.Width"])),
10*iris[i,"Petal.Length"],
c(41,42,45)[as.numeric(iris[i,"Species"])],
conn)
}
library(testthat)
testthat::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
devtools::test()
d = c(TRUE,FALSE)
d
d = c(TRUE,FALSE)
f = as.factor(d)
f
is.factor(f)
d = as.logical(c(NA, NA))
d
is.logical(d)
as.integer(d)
i = as.integer(d)
is.integer(i)
l = c(TRUE,FALSE,NA)
is.logical(l)
devtools::test()
is.double(c(1.0, NA))
d = c(1.0, NA)
d = NA
d = c(1.0, NA)
d == NA
d[x=NA]
d = c(1.0, NA)
d[x=NA]
library(rtson)
library(rtson)
library(rtson)
s = tson.scalar(4)
library(rtson)
s = tson.scalar(4)
library(rtson)
s = tson.scalar(4)
library(rtson)
s = tson.scalar(4)
library(rtson)
s = tson.scalar(4)
str(s)
str(s)
str(s)
s = tson.int(4)
s
jsonlite::unbox(4)
str(jsonlite::unbox(4))
class(jsonlite::unbox(4))
class(s)
jsonlite::unbox
jsonlite:::as.scalar
jsonlite:::as.scalar(4)
tson.scalar(4)
tson.int(4)
s = tson.int(4)
s
s = tson.int(4)
s
s = tson.int(4)
s
library(rtson)
s = tson.int(4)
s
library(jsonlite)
s
is.class
inherit
inherits
?inherits
library(rtson)
testhat::test()
library(testhat)
testthat::test()
?testthat
testthat::run()
devtools::test()
devtools::test()
devtools::test()
library(rtson)
library(rtson)
devtools::test()
?writeChar
?writeBin
?rawToChar
?iconv
bytes = charToRaw('façile')
iconv(bytes, from="UTF-8")
?readBin
?readBin
library(rtson)
devtools::test()
library(rtson)
devtools::test()
library(rtson)
devtools::test()
library(rtson)
devtools::test()
library(rtson)
library(rtson)
devtools::test()
library(rtson)
devtools::test()
enc2utf8('gggg')
enc2utf8('plplpll传/傳')
iconv('plplpll传/傳')
iconv('plplpll传/傳', toRaw = TRUE)
iconv(c("fff", 'plplpll传/傳'), toRaw = TRUE)
iconvlist()
iconv(c("fff", 'plplpll传/傳'), toRaw = TRUE)
iconv(c("fff", 'plplpll传/傳'), toRaw = F)
Encoding(iconv(c("fff", 'plplpll传/傳'), toRaw = F))
Encoding(iconv(c("fff", 'plplpll传/傳'),to="UTF-8" toRaw = F))
Encoding(iconv(c("fff", 'plplpll传/傳'),to="UTF-8" , toRaw = F))
?wrtieBin
?writeBin
bin = writeBin(c('a','b'), raw(0), useBytes=TRUE)
bin
utf8 = iconv(bin, to = "UTF-8", toRaw = TRUE)
utf8
utf8 = iconv(bin, to = "UTF-8")
utf8
bin = writeBin(c('a','b'), raw(0), useBytes=TRUE)
library(rlang)
??rlang
?rlang
?writeLines
rawToChar(0)
bin = raw(0)
writeBin(0, bin, size=1, endian =  "little")
writeBin(0L, bin, size=1, endian =  "little")
bin = raw(0)
writeBin(0L, bin, size=1, endian =  "little")
bin
rawToChar(bin)
bin = raw(1)
rawToChar(bin)
bin = writeBin(0L, bin, size=1, endian =  "little")
bin
rawToChar(bin)
bin = raw(0)
bin
bin = writeBin(0L, raw(0), size=1, endian =  "little")
bin
character(length=1)
c=character(length=1)
length(c)
charToRaw(c)
bin = writeBin(0L, raw(0), size=1, endian =  "little")
bin
rawToChar(bin)
length(rawToChar(bin))
charToRaw(rawToChar(bin))
?charToRaw
?writeBin
?Encoding
s = "a\x00b\x00"
s = "\x00"
writeLines(c('a','b'), sep="\x00")
?Encoding
x <- "fa\xE7ile"
x
Encoding(x)
Encoding(x) <- "latin1"
x
x <- "fa\xE7ile"
Encoding(x)
Encoding(x) <- "latin1"
x
bin = writeBin(x, raw(0))
bin
xx <- iconv(x, "latin1", "UTF-8")
bin2 = writeBin(xx, raw(0))
bin2
Encoding("façile")
devtools::install_github("tercen/TSON", ref = "1.4-rtson", subdir="rtson", upgrade_dependencies = FALSE)
devtools::install_github("tercen/teRcen", ref = "0.3", upgrade_dependencies = FALSE)
devtools::install_github("tercen/teRcen", ref = "0.3", upgrade_dependencies = TRUE)
devtools::install_github("tercen/teRcen", ref = "0.3", upgrade_dependencies = FALSE)
install.packages('dplyr')
devtools::install_github("tercen/teRcen", ref = "0.3", upgrade_dependencies = FALSE)
installed.packages()
R.Version()
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson")
readBin(con, integer(), 1)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
readBin(con, integer(), 1)
object = readTSON(con)
library(rtson)
object = readTSON(con)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
library(rtson)
object = readTSON(con)
object
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object = readTSON(con)
object
close(con)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object = readTSON(con)
object
close(con)
devtools::install_github("eddelbuettel/rbenchmark")
library(rbenchmark)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
benchmark("read"={
readTSON(con)
})
close(con)
library(rbenchmark)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
benchmark("read"={
readTSON(con)
})
close(con)
library(rbenchmark)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
benchmark("read"={
readTSON(con)
},
replications = 1000,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
close(con)
library(rbenchmark)
benchmark("lm" = {
X <- matrix(rnorm(1000), 100, 10)
y <- X %*% sample(1:10, 10) + rnorm(100)
b <- lm(y ~ X + 0)$coef
},
"pseudoinverse" = {
X <- matrix(rnorm(1000), 100, 10)
y <- X %*% sample(1:10, 10) + rnorm(100)
b <- solve(t(X) %*% X) %*% t(X) %*% y
},
"linear system" = {
X <- matrix(rnorm(1000), 100, 10)
y <- X %*% sample(1:10, 10) + rnorm(100)
b <- solve(t(X) %*% X, t(X) %*% y)
},
replications = 1000,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
library(rbenchmark)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
benchmark("read"={
object = readTSON(con)
},
replications = 1000,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
library(rbenchmark)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
benchmark("read"={
object = readTSON(con)
},
replications = 1000,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
library(rbenchmark)
library(rtson)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
benchmark("read"= {
object <- readTSON(con)
},
replications = 1000,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
object = readTSON(con)
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object = readTSON(con)
benchmark("read"= {
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object <- readTSON(con)
close(con)
},
replications = 1000,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
benchmark("read"= {
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object <- readTSON(con)
close(con)
},
replications = 1,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
benchmark("read"= {
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object <- readTSON(con)
close(con)
},
replications = 1,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
library(rbenchmark)
library(rtson)
library("rjson")
benchmark("read tson"= {
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object <- readTSON(con)
close(con)
},
"read json"= {
json_file = "/home/alex/dev/bitbucket/tercen/TSON/dtson/bin/test_data.json"
object <- fromJSON(paste(readLines(json_file), collapse=""))
},
replications = 1,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
library(rbenchmark)
library(rtson)
library(jsonlite)
benchmark("read tson"= {
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object <- readTSON(con)
close(con)
},
"read json"= {
json_file = "/home/alex/dev/bitbucket/tercen/TSON/dtson/bin/test_data.json"
object <- fromJSON(paste(readLines(json_file), collapse=""))
},
replications = 1,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
json_file = "/home/alex/dev/bitbucket/tercen/TSON/dtson/bin/test_data.json"
object <- fromJSON(paste(readLines(json_file), collapse=""))
object
objectJSON <- fromJSON(paste(readLines(json_file), collapse=""))
objectJSON
json_file = "/home/alex/dev/bitbucket/tercen/TSON/dtson/bin/test_data.json"
objectJSON <- fromJSON(paste(readLines(json_file), collapse=""))
objectJSON
benchmark("read tson"= {
con = file("/home/alex/dev/bitbucket/tercen/TSON/rtson/tests/testthat/test_data.tson", "rb")
object <- readTSON(con)
close(con)
},
"read json"= {
json_file = "/home/alex/dev/bitbucket/tercen/TSON/dtson/bin/test_data.json"
object <- fromJSON(paste(readLines(json_file), collapse=""))
},
replications = 1,
columns = c("test", "replications", "elapsed",
"relative", "user.self", "sys.self"))
devtools::install_github("rustr/rustinr")
library(rustinr)
rust('
// #[rustr_export]
pub fn say_hi() -> String{
"Hello World".into()
}
')
say_hi()
say_hi()
say_hi()
say_hi
rust('
#![feature(custom_derive, plugin)]
#![plugin(serde_macros)]
#[macro_use]
extern crate rustr;
pub mod export;
pub use rustr::*;
extern crate serde;
extern crate serde_json;
#[derive(Serialize, Deserialize, Debug)]
struct Point {
x: i32,
y: i32,
}
// #[rustr_export]
pub fn serdeinr()->RResult<String>{
let point = Point { x: 1, y: 2 };
let serialized = rtry!(serde_json::to_string(&point));
Ok(serialized)
}
// #[rustr_export]
pub fn serdefromr(x:String)->RResult<()>{
let res: Point = rtry!(serde_json::from_str(&x));
r_printf(&format!("{:?}",res));
Ok(())
}
', depend = '
[dependencies]
serde = "*"
serde_json = "*"
serde_macros = "*"
rustr = "*"
', header = F)
rust('
#![feature(custom_derive, plugin)]
#![plugin(serde_macros)]
#[macro_use]
extern crate rustr;
pub mod export;
pub use rustr::*;
extern crate serde;
extern crate serde_json;
#[derive(Serialize, Deserialize, Debug)]
struct Point {
x: i32,
y: i32,
}
// #[rustr_export]
pub fn serdeinr()->RResult<String>{
let point = Point { x: 1, y: 2 };
let serialized = rtry!(serde_json::to_string(&point));
Ok(serialized)
}
// #[rustr_export]
pub fn serdefromr(x:String)->RResult<()>{
let res: Point = rtry!(serde_json::from_str(&x));
r_printf(&format!("{:?}",res));
Ok(())
}
', depend = '
[dependencies]
serde = "*"
serde_json = "*"
serde_macros = "*"
rustr = "*"
', header = F)
rust('
#![feature(custom_derive, plugin)]
#![plugin(serde_macros)]
#[macro_use]
extern crate rustr;
pub mod export;
pub use rustr::*;
extern crate serde;
extern crate serde_json;
#[derive(Serialize, Deserialize, Debug)]
struct Point {
x: i32,
y: i32,
}
// #[rustr_export]
pub fn serdeinr()->RResult<String>{
let point = Point { x: 1, y: 2 };
let serialized = rtry!(serde_json::to_string(&point));
Ok(serialized)
}
// #[rustr_export]
pub fn serdefromr(x:String)->RResult<()>{
let res: Point = rtry!(serde_json::from_str(&x));
r_printf(&format!("{:?}",res));
Ok(())
}
', depend = '
[dependencies]
serde = "*"
serde_json = "*"
serde_macros = "*"
rustr = "*"
', header = F)
rust('
extern crate rustc_serialize;
use rustc_serialize::json;
#[derive(RustcDecodable, RustcEncodable)]
pub struct TestStruct  {
data_str:  Vec<String>,
data_vector: Vec<u8>,
}
// #[rustr_export]
pub fn rusttor()->RResult<String>{
let object = TestStruct {
data_str:    vec!["r".into(),"u".into(),"s".into(),"t".into()],
data_vector: vec![2,3,4,5],
};
let encoded = rtry!(json::encode(&object));
Ok(encoded)
}
', depend = '
[dependencies]
rustc-serialize = "0.3"
rustr = "*"
')
as.data.frame(rjson::fromJSON(rusttor()))
install.packages("rjson")
as.data.frame(rjson::fromJSON(rusttor()))
rusttor()
devtools::install_github("tercen/TSON", ref = "1.4.3-rtson", subdir="rtson", upgrade_dependencies = FALSE, args="--no-multiarch")
devtools::install_github("tercen/TSON", ref = "1.4.4-rtson", subdir="rtson", upgrade_dependencies = FALSE, args="--no-multiarch")
